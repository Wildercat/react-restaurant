{"version":3,"sources":["global-components/BSNav.js","global-components/BSCardAccord.js","global-components/ArrayToHtml.js","CardCols.js","Splash.js","App.js","serviceWorker.js","index.js"],"names":["BSNavToggle","className","type","data-toggle","data-target","this","props","targetId","React","Component","BSNavList","nav_items","navbar_items","map","item","idx","key","href","target","title","BSNav","navId","id","BSCardAccord","aria-expanded","aria-controls","aria-labelledby","data-parent","children","ArrayToHtml","TagName","tag","mappedArr","content","atts","CardCols","menuData","cols","mappedFood","menu_items","innerItem","innerIdx","description","price","Splash","style","height","backgroundImage","imgURL","backgroundSize","App","state","i","response","axios","get","console","log","data","Math","ceil","random","push","localStorage","setItem","JSON","stringify","setState","getItem","parse","getMenuData","appData","splash_image","name","address","hours","top_cols","bot_cols","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e39c48d.chunk.js","sourcesContent":["import React from 'react';\n\nclass BSNavToggle extends React.Component {\n    render() {\n        return (\n            <button className='navbar-toggler' type='button' data-toggle='collapse' data-target={`#${this.props.targetId}`}>\n                <span className='navbar-toggler-icon'></span>\n            </button>\n        );\n    }\n}\n\nclass BSNavList extends React.Component {\n    render() {\n        const nav_items = this.props.navbar_items.map((item,idx) => {\n            return (\n                <li key={`li${idx}`}className='nav-item'>\n                    <a key={`a${idx}`} className='nav-link' href={item.target}> {item.title} </a>\n                </li>\n            );\n        })\n        return (\n            <ul className='navbar-nav mr-auto'>\n                {nav_items}\n            </ul>\n\n        );\n    }\n}\n\n\n\nclass BSNav extends React.Component {\n    //\n    render() {\n        \n        return (\n            <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\n                <BSNavToggle targetId={this.props.navId} />\n                <div className='collapse navbar-collapse' id={this.props.navId}>\n                    <BSNavList navbar_items={this.props.navbar_items} />\n                </div>\n            </nav>\n        );\n    }\n}\nexport default BSNav;","import React from 'react';\n\n\n\nclass BSCardAccord extends React.Component {\n\n    render() {\n        return (\n            <div className='accordion' id={`accord${this.props.title}`}>\n                <div className=\"card\">\n                    <div className=\"card-header\" id={`heading${this.props.title}`}>\n                        <h4 className='mb-0 text-center'>\n                            <button className='btn' type='button' data-toggle='collapse' data-target={`#collapse${this.props.title}`} aria-expanded=\"false\" aria-controls={`collapse${this.props.title}`}>\n                                <span className='display-4'>{this.props.title}</span> <p className='text-secondary font-weight-light'>Click to Collapse/Expand</p>\n                            </button>\n                        </h4>\n                    </div>\n                    <div id={`collapse${this.props.title}`} className='collapse show' aria-labelledby={`heading${this.props.title}`} data-parent={`#accord${this.props.title}`}>\n                        <div className=\"card-body\">\n                            {this.props.children}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BSCardAccord;","import React from 'react';\n\nclass ArrayToHtml extends React.Component {\n    // props: tag(str), atts(arr of obj),\n    \n    render() {\n        // console.log('ArrayToHtml:');\n        // console.log(this.props.content);\n        const TagName = this.props.tag;\n        // console.log({TagName});\n        const mappedArr = this.props.content.map((item, idx) => {\n            return (\n                <TagName key={idx} {...item.atts} >\n                    {item.title}\n                </TagName>\n            );\n        });\n        return (\n            <>\n                {mappedArr}\n            </>\n        );\n    }\n}\n\nexport default ArrayToHtml;\n","import React from 'react';\nimport BSCardAccord from './global-components/BSCardAccord'\nimport ArraytoHtml from './global-components/ArrayToHtml'\n\n\nclass CardCols extends React.Component {\n\n    render() {\n        const menuData = this.props.menuData ? this.props.menuData : null;\n\n        return menuData ?\n            this.props.cols.map((item, idx) => {\n                let mappedFood = menuData[idx].menu_items.map((innerItem, innerIdx) => {\n                    return {\n                        title: <span>{innerItem.description} <i><b>${innerItem.price}</b></i></span>,\n                        atts:{\n                            className: 'list-group-item'\n                        }\n                    }\n                })\n                \n                return (\n                    \n                    <div key={idx} className='col-lg'>\n                        \n                        <BSCardAccord title={item.title}>\n                            <ul className='list-group list-group-flush'>\n                                <ArraytoHtml tag='li' content={mappedFood}>\n\n                                </ArraytoHtml>\n                            </ul>\n                        </BSCardAccord>\n                    </div>\n\n                );\n            })\n            :\n            null;\n    }\n}\n\nexport default CardCols;","import React from 'react';\n\nclass Splash extends React.Component {\n    render() {\n        return (\n            <div className='row p-3' style={{\n                height: '40em',\n                backgroundImage: `url(${this.props.imgURL})`,\n                backgroundSize: 'cover'\n            }}>\n            {this.props.children}    \n            </div>\n        );\n    }\n}\n \nexport default Splash;","import React from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport BSNav from './global-components/BSNav';\nimport appData from './json/appData.json';\nimport CardCols from './CardCols';\nimport Splash from './Splash';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuData: null\n    }\n  }\n\n\n\n  async getMenuData() {\n    let menuData = [];\n    for (let i = 0; i < 5; i++) {\n\n      let response;\n      try {\n        response = await axios.get('https://entree-f18.herokuapp.com/v1/menu/12');\n      } catch (err) {\n        console.log(err);\n      }\n      response.data.menu_items = response.data.menu_items.map(item => {\n        // random number in range 10-50\n        item.price = Math.ceil(40 * Math.random() + 10);\n        return item;\n      })\n      menuData.push(response.data);\n    }\n\n    localStorage.setItem('menuData', JSON.stringify(menuData));\n\n    this.setState({ 'menuData': menuData })\n  }\n\n  componentDidMount() {\n    // if there is a saved menu, add it to state, else fetch new\n    localStorage.getItem('menuData') ? this.setState({\n      menuData: JSON.parse(localStorage.getItem('menuData'))\n    }) : this.getMenuData();\n  }\n\n  render() {\n    let nav_collapse = 'burger1';\n    return (\n      <div className=\"App container\">\n        \n        <Splash className='row p-3' imgURL={appData.content.splash_image}>\n          <div className='col'>\n            <BSNav navId={nav_collapse} navbar_items={appData.content.navbar_items} />\n            <div className='row justify-content-left'>\n                <h1 className='display-1 text-light'>{appData.content.name}</h1>\n            </div>\n            <div className='row'>\n              <h3 className='text-light font-weight-light'>{appData.content.address}</h3>\n            </div>\n            <div className='row'>\n              <h5 className='text-light font-weight-lighter'>{appData.content.hours}</h5>\n            </div>\n          </div>\n          \n        </Splash>\n        <div className='row p-3'>\n          <a name='menu1'></a>\n\n          <CardCols menuData={this.state.menuData} cols={appData.content.top_cols} />\n\n\n        </div>\n        <div className='row p-3'>\n        <a name='menu2'></a>\n          <CardCols menuData={this.state.menuData} cols={appData.content.bot_cols} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom'; \nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}